const fs = require('fs');
const bmp = require('bmp-js');

// Bitmap parameters:
const headerHeight = 10;
const charWidth = 10;
const charHeight = 19;
const spacing = 1;

/**
 * The first character in the bitmap will be treated as this value. For example
 * if 33 is set, the first character in the bitmap shall be the '!'.
 *
 * @type {number}
 */
const asciiOffset = 0;


const topComment = `/*
 * NOTE: This file is generated by the bitmap-font tool, use it to update it.
 */`

function processBitmap(filePath) {
    const {width, height, data} = bmp.decode(fs.readFileSync(filePath));
    const cellWidth = charWidth + spacing;
    const cellHeight = charHeight + spacing;
    const columns = width / cellWidth;
    const rows = (height - headerHeight) / cellHeight;
    const charCount = columns * rows;


    //
    // Write the C file
    //
    let code = `${topComment}
#include <stdint.h>

uint8_t bitmapFontCharWidth = ${charWidth};
uint8_t bitmapFontCharHeight = ${charHeight};
uint8_t bitmapFontCharCount = ${charCount};
uint8_t bitmapFontAsciiOffset = ${asciiOffset};

uint8_t bitmapFontCharSet[${charCount}][${charWidth * charHeight}] = {
`

    let charCode = asciiOffset;
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < columns; col++) {

            // Convert a char
            const topLeftX = (col * cellWidth);
            const topLeftY = (headerHeight + row * cellHeight);

            code += `\n // Char ${charCode} \n{`
            for (let onCharY = 0; onCharY < charHeight; onCharY++) {
                for (let onCharX = 0; onCharX < charWidth; onCharX++) {
                    const index = ((topLeftY + onCharY) * width + (topLeftX + onCharX)) * 4;
                    let pixel = data.slice(index, index + 4);

                    code += (isBlack(pixel) ? 1 : 0) + ", ";
                }
                code += " //\n";
            }
            code += `}, \n`

            ++charCode;
        }
    }
    code += "};"

    fs.writeFileSync("../../kernel/src/shared/video/bitmap_font_data.cpp", code);


    //
    // Write the header
    //
    const header = `${topComment}
#ifndef __BITMAP_FONT_DATA__
#define __BITMAP_FONT_DATA__
#include <stdint.h>

extern uint8_t bitmapFontCharSet[${charCount}][${charWidth * charHeight}];
#endif
    `;

    fs.writeFileSync("../../kernel/inc/shared/video/bitmap_font_data.hpp", header);
}

function isBlack(pixel) {
    return pixel[0] === 0 && pixel[1] === 0 && pixel[2] === 0;
}

processBitmap('font.bmp');
